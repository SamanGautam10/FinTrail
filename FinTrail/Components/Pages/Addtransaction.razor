@page "/addtransaction"

@using FinTrail.Model
@using FinTrail.Services
@using FinTrail.Services.Interface
@inject NavigationManager Nav
@inject ITransactionInterface TransactionService
@inject IUserInterface UserService

<style>
    /* Form Styling */
    .form-container {
    background-color: #c5e3b3;
    color: #4a4a4a;
    border-radius: 10px;
    width: 500px;
    height: auto;
    overflow-y: auto;
    padding: 20px;
    }

    /* Form Labels and Inputs */
    .form-container .form-label {
    color: #4a4a4a;
    }

    .form-container .form-control {
    border-radius: 10px;
    border: 1px solid #4a4a4a;
    }

    /* Submit Button */
    .submit-btn {
    border-radius: 10px;
    background-color: #28a745;
    color: #ffffff;
    transition: background-color 0.3s ease, transform 0.3s ease;
    }

    .submit-btn:hover {
    background-color: #52a34b;
    transform: scale(1.05);
    }

</style>

<NavBarrazor />

@* Form to add Transaction *@
<div class="container d-flex justify-content-center align-items-center" style="height: 100vh; margin-left: 200px;">
    <div class="form-container p-4">
        <h2 class="text-center mb-3">Add Transactions Details</h2>

        @if (ErrorMessage != null)
        {
            <p style="color:red;">@ErrorMessage</p>
        }

        <form @onsubmit="HandleSaveTransaction">

            <div class="mb-2">
                <label for="transactionName" class="form-label">Transaction Name</label>
                <input type="text" class="form-control" name="transaction_name" @bind="TransactionName" required>
            </div>

            <div class="mb-2">
                <label for="Amount" class="form-label">Amount</label>
                <input type="number" class="form-control" name="amount" @bind="Amount" required>
            </div>

            <div class="mb-2">
                <label for="transactionCategory" class="form-label">Transaction Category</label>
                <select class="form-control" id="transactionCategory" name="transaction_category" @bind="Category" required>
                    <option value="" disabled selected>Select Category</option>
                    <option value="Debit">Debit</option>
                    <option value="Credit">Credit</option>
                </select>
            </div>

            <div class="mb-2">
                <label for="transactionDate" class="form-label">Transaction Date</label>
                <input type="date" class="form-control" id="transactionDate" name="transaction_date" @bind="TransactionDate" required>
            </div>

            <div class="mb-2">
                <label for="transactionNotes" class="form-label">Notes</label>
                <textarea class="form-control" name="transaction_Notes" rows="5" @bind="Notes"></textarea>
            </div>

            <div class="mb-2">
                <label for="tags" class="form-label">Tags</label>
                <select class="form-control" name="tags" id="tags" @bind="Tags" required>
                    <option value="" disabled selected>Select Tags</option>
                    <!-- Existing Tags -->
                    @foreach (var tag in availableTags)
                    {
                        <option value="@tag">@tag</option>
                    }
                </select>

                <!-- Add Custom Tag -->
                <div class="mt-2">
                    <input type="text" class="form-control" placeholder="Add a custom tag..." @bind="customTag" />
                    <button class="btn btn-primary mt-2" type="button" @onclick="AddCustomTag">Add Custom Tag</button>
                </div>
            </div>

            <div class="text-center" style="margin-top: 20px;">
                <button type="submit" class="btn submit-btn">Submit</button>
            </div>
        </form>
    </div>
</div>

@code {
    // Variables for transaction
    public int TransactionID { get; set; }
    public required string TransactionName { get; set; }
    public required decimal Amount { get; set; }
    public required string Category { get; set; }
    public DateTime TransactionDate { get; set; } = DateTime.Now;
    public string Notes { get; set; }
    public string Tags { get; set; }

    // to generate error message
    private string ErrorMessage { get; set; }

    private async Task HandleSaveTransaction()
    {
        try
        {
            if (Amount < 1)
            {
                ErrorMessage = "Amount cannout be in negative.";
                return;
            }

            // Call service to update balance
            var username = UserService.GetLoggedInUser()?.Username;

            if (Category == "Debit" && UserService.GetBalance().Balance < Amount)
            {
                ErrorMessage = "Insufficient balance to conduct the transaction.";
                return; // Stop execution of code furthur 
            }

            // Update balance if valid
            UserService.UpdateBalance(username, Amount, Category);

            // Creating and Adding Transaction
            var newTransaction = new FinTrail.Model.Transaction
                {
                    TransactionName = TransactionName,
                    Amount = Amount,
                    Category = Category,
                    TransactionDate = TransactionDate,
                    Notes = Notes,
                    Tags = Tags
                };

            if (TransactionService.AddTransaction(newTransaction))
            {
                Nav.NavigateTo("/transaction");
            }
            else
            {
                ErrorMessage = "Failed to add transaction. Please try again.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred: {ex.Message}";
        }
    }

    // Adding Custom Tags
    // Available Tags
    private List<string> availableTags = new()
    {
        "Yearly Bonus",
        "Monthly Salary",
        "Food",
        "Drink",
        "Clothes",
        "Gadgets",
        "Miscellaneous",
        "Fuel",
        "Rent",
        "EMI",
        "Party",
        "Grocery",
        "Household Expenses",
        "Utilities",
        "Salary",
        "Investment Return",
        "Business Income",
    };

    // To store a custom tag
    private string customTag { get; set; } = string.Empty;

    // Method to add custom tag
    private void AddCustomTag()
    {
        if (!string.IsNullOrWhiteSpace(customTag) && !availableTags.Contains(customTag))
        {
            availableTags.Add(customTag);
            customTag = string.Empty; // Clear the input after adding
        }
    }
}
