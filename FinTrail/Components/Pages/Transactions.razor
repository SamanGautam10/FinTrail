@page "/transaction"

@using FinTrail.Model
@using FinTrail.Services.Interface
@inject ITransactionInterface TransactionService
@inject IUserInterface UserService

<style>
    .container {
    margin-left: 270px;
    }

    .transaction-table {
    margin-left: 20px;
    background-color: #ffffff; 
    border-radius: 10px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    /* Adjusting the Notes column width */
    .transaction-table table th:nth-child(6),
    .transaction-table table td:nth-child(6) {
    width: 230px;
    }

    .search-filter-sort {
    display: flex;
    justify-content: space-between;
    margin-right: 15px;
    }

    .search-filter-sort .col-md-3 {
    margin-left: 0;
    }

    .search-filter-sort select {
    padding-left: 15px;
    }

    .search-input {
    width: 100%;
    padding: 10px;
    border: 1px solid #cecfce;
    border-radius: 5px;
    font-size: 14px;
    box-sizing: border-box;
    height: 37px;
    }
</style>

<NavBarrazor />

<div class="container mt-5">
    <!-- Search, Filter, and Sort Options -->
    <div class="row mb-3 search-filter-sort">
        <!-- Search By Dropdown -->
        <div class="col-md-3 position-relative">
            <select class="form-select" id="searchBy" aria-label="Search By" @onchange="UpdateSearchBy">
                <option selected>Search By</option>
                <option value="TransactionName">Transaction Name</option>
                <option value="TransactionDate">Date</option>
                <option value="Tags">Tags</option>
            </select>
        </div>

        <!-- Search Bar below Search By -->
        <div class="col-md-3">
            <input type="text" id="searchQuery" class="search-input" placeholder="Search..." @bind="searchQuery" />
        </div>

        <!-- Filter By Dropdown -->
        <div class="col-md-3 position-relative">
            <select class="form-select" id="filterBy" aria-label="Filter By" @onchange="UpdateFilterBy">
                <option selected>Filter By</option>
                <option value="Debit">Debit</option>
                <option value="Credit">Credit</option>
            </select>
        </div>

        <!-- Sort By Dropdown -->
        <div class="col-md-3 position-relative">
            <select class="form-select" id="sortBy" aria-label="Sort By" @onchange="UpdateSortBy">
                <option selected>Sort By</option>
                <option value="Amount:LowToHigh">Amount: High to Low</option>
                <option value="Amount:HighToLow">Amount: Low to High</option>
                <option value="Date:Ascending">Date: Descending</option>
                <option value="Date:Descending">Date: Ascending</option>
            </select>
        </div>

        <!-- Date Range Inputs -->
        <div class="col-md-6 position-relative">
            <label for="dateRange" class="form-label fw-bold mb-2 mt-3">Date Range</label>
            <div class="d-flex justify-content-between">
                <input type="date" id="startDate" class="search-input me-7" @bind="startDate" />
                <input type="date" id="endDate" class="search-input" @bind="endDate" />
            </div>
        </div>

    </div>

    <!-- Apply Filter Button -->
    <div class="text-end mb-3">
        <button class="btn btn-primary" @onclick="ApplyFilters">Apply Filters</button>
    </div>

    <!-- Add Transaction Button -->
    <div class="add-transaction-btn text-end mb-3">
        <a class="btn btn-primary btn-lg" href="/addtransaction">Add Your Transaction</a>
    </div>

    <!-- Transaction Table -->
    <div class="transaction-table">
        <h4>Transaction Details</h4>
        <table class="table table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th>SN.</th>
                    <th>Transaction Name</th>
                    <th>Amount</th>
                    <th>Category</th>
                    <th>Date</th>
                    <th>Notes</th>
                    <th>Tags</th>
                </tr>
            </thead>
            <tbody>
                @if (filteredTransactions?.Any() == true)
                {
                    int sn = 1;
                    // Filter out transactions with TransactionID == 0 as it used only for seeding
                    foreach (var transaction in filteredTransactions.Where(t => t.TransactionID != 0).Reverse())
                    {
                                <tr>
                                    <td>@sn</td>
                                    <td>@transaction.TransactionName</td>
                                    <td>@SelectedCurrency @transaction.Amount</td>
                                    <td>@transaction.Category</td>
                                    <td>@transaction.TransactionDate.ToString("yyyy-MM-dd")</td>
                                    <td>@transaction.Notes</td>
                                    <td>@transaction.Tags</td>
                                </tr>
                        sn++;
                    }
                }
                @if (filteredTransactions == null || filteredTransactions.All(t => t.TransactionID == 0))
                {
                        <tr>
                            <td colspan="8" class="text-center">No transactions found.</td>
                        </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    // initializatio of different variables
    private List<Transaction> transactions = new();
    private List<Transaction> filteredTransactions = new();
    private string SelectedCurrency { get; set; }
    private string searchQuery = string.Empty;
    private string searchBy = "TransactionName";
    private string filterBy = "All";
    private string sortBy = "None";
    private DateTime? startDate = null;
    private DateTime? endDate = null;

    // Method to get all transction, selected currency of logged in user
    protected override async Task OnInitializedAsync()
    {
        transactions = TransactionService.GetAllTransactions();
        SelectedCurrency = UserService.GetLoggedInUser().SelectedCurrency;
        filteredTransactions = transactions; // Initialize with all transactions
        ApplyFilters(); //Applies default filter
    }

    /*
     * Below are the codes which are used to create a search, sorting and filtering functions
     * Different data are filtered, searched or sort according to the data provided by the user 
     * Or the option selected by the user
     */
    private void UpdateSearchBy(ChangeEventArgs e)
    {
        searchBy = e.Value.ToString();
    }

    private void UpdateFilterBy(ChangeEventArgs e)
    {
        filterBy = e.Value.ToString();
    }

    private void UpdateSortBy(ChangeEventArgs e)
    {
        sortBy = e.Value.ToString();
    }

    private void ApplyFilters()
    {
        filteredTransactions = transactions;

        // Search Logic
        if (!string.IsNullOrWhiteSpace(searchQuery))
        {
            filteredTransactions = filteredTransactions.Where(t =>
                searchBy switch
                {
                    "TransactionName" => t.TransactionName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase),
                    "Tags" => t.Tags.Contains(searchQuery, StringComparison.OrdinalIgnoreCase),
                    "TransactionDate" => t.TransactionDate.ToString("yyyy-MM-dd").Contains(searchQuery),
                    _ => true
                }).ToList();
        }

        // Filter by Category (Debit/Credit)
        if (filterBy != "All")
        {
            filteredTransactions = filteredTransactions.Where(t => t.Category.Equals(filterBy, StringComparison.OrdinalIgnoreCase)).ToList();
        }

        // Sorting Logic
        if (sortBy.StartsWith("Amount"))
        {
            // Check for the direction: Low to High or High to Low
            filteredTransactions = sortBy switch
            {
                "Amount:LowToHigh" => filteredTransactions.OrderBy(t => t.Amount).ToList(),
                "Amount:HighToLow" => filteredTransactions.OrderByDescending(t => t.Amount).ToList(),
                _ => filteredTransactions
            };
        }

        // Check for the direction: Ascending or Descending
        if (sortBy.StartsWith("Date"))
        {
            filteredTransactions = sortBy switch
            {
                "Date:Ascending" => filteredTransactions.OrderBy(t => t.TransactionDate).ToList(),
                "Date:Descending" => filteredTransactions.OrderByDescending(t => t.TransactionDate).ToList(),
                _ => filteredTransactions
            };
        }

        // Date Range Filtering
        if (startDate.HasValue && endDate.HasValue)
        {
            filteredTransactions = filteredTransactions.Where(t =>
                t.TransactionDate.Date >= startDate.Value.Date &&
                t.TransactionDate.Date <= endDate.Value.Date
            ).ToList();
        }
    }
}