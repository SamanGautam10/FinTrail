@page "/adddebt"

@using FinTrail.Model
@using FinTrail.Services
@using FinTrail.Services.Interface
@inject NavigationManager Nav
@inject IDebtInterface DebtService
@inject IUserInterface UserService

<style>
    /* Navigation Bar */
    .sidebar {
        display: inline-block;
        height: 100%;
        width: 200px;
        position: fixed;
        top: 0;
        left: 0;
        background-color: #c5e3b3;
        padding-top: 20px;
        text-align: center;
    }

        .sidebar img {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            margin-bottom: 20px;
        }

    .balance-display {
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 10px;
        margin-top: 35px;
        margin-bottom: 10px;
        font-family: 'Varela Round', Tahoma, sans-serif;
        font-size: 18px;
        font-weight: bold;
        color: #4a4a4a;
    }

        .balance-display i {
            font-size: 24px;
            margin-right: 8px;
            color: #0078d7;
        }

    .sidebar ul {
        list-style-type: none;
        padding: 0;
        margin: 0;
    }

        .sidebar ul li {
            padding: 20px 0;
            text-align: center;
            font-family: 'Varela Round', Tahoma, sans-serif;
            font-size: 17px;
            font-weight: bold;
        }

            .sidebar ul li a {
                color: #4a4a4a;
                text-decoration: none;
                display: block;
                padding: 10px 0;
                border-radius: 5px;
                transition: all 0.3s ease-in-out;
            }

                .sidebar ul li a:hover {
                    color: #ffffff;
                    background-color: #0078d7;
                    cursor: pointer;
                }

    /* Form Styling */
    .form-container {
        background-color: #c5e3b3;
        color: #4a4a4a;
        border-radius: 10px;
        width: 500px;
        height: auto;
        overflow-y: auto;
        padding: 20px;
    }

        /* Form Labels and Inputs */
        .form-container .form-label {
            color: #4a4a4a;
        }

        .form-container .form-control {
            border-radius: 10px;
            border: 1px solid #4a4a4a;
        }

    /* Submit Button */
    .submit-btn {
        border-radius: 10px;
        background-color: #28a745;
        color: #ffffff;
        transition: background-color 0.3s ease, transform 0.3s ease;
    }

        .submit-btn:hover {
            background-color: #52a34b;
            transform: scale(1.05);
        }

</style>

<div class="sidebar">
    <!-- Logo -->
    <img src="/images/FinTrail.png" alt="Logo">

    <!-- Balance Display -->
    <div class="balance-display">
        <i class="fas fa-coins"></i> @UserService.GetBalance().SelectedCurrency @UserService.GetBalance().Balance
    </div>

    <ul>
        <li><a href="/dashboard">Dashboard</a></li>
        <li><a href="/transaction">Transactions</a></li>
        <li><a href="/debt">Debt</a></li>
        <li><a href="/logout">Logout</a></li>
    </ul>
</div>

@* Form to add Debt *@
<div class="container d-flex justify-content-center align-items-center" style="height: 100vh; margin-left: 200px;">
    <div class="form-container p-4">
        <h2 class="text-center mb-3">Add Debt Details</h2>

        @if (ErrorMessage != null)
        {
            <p style="color:red;">@ErrorMessage</p>
        }

        <form @onsubmit="HandleSaveDebt">
            <div class="mb-2">
                <label for="debtFrom" class="form-label">Debt From</label>
                <input type="text" class="form-control" @bind="DebtFrom" required>
            </div>

            <div class="mb-2">
                <label for="Amount" class="form-label">Amount</label>
                <input type="number" class="form-control" @bind="Amount" required>
            </div>

            <div class="mb-2">
                <label for="startDate" class="form-label">Start Date</label>
                <input type="date" class="form-control" @bind="StartDate" required>
            </div>

            <div class="mb-2">
                <label for="debtendDate" class="form-label">End Date</label>
                <input type="date" class="form-control" @bind="EndDate" required>
            </div>

            <div class="mb-2">
                <label for="relationship" class="form-label">Relationship</label>
                <select class="form-control" @bind="Relationship" required>
                    <option value="" disabled selected>Select Relationship</option>
                    <option value="Bank">Bank</option>
                    <option value="Family">Family</option>
                    <option value="Friends">Friends</option>
                    <option value="Small Finance">Small Finance</option>
                    <option value="Others">Others</option>
                </select>
            </div>

            <div class="mb-2">
                <label for="status" class="form-label">Status</label>
                <select class="form-control" @bind="Status" required>
                    <option value="" disabled selected>Select Status</option>
                    <option value="Pending">Pending</option>
                    <option value="Paid">Paid</option>
                </select>
            </div>

            <div class="mb-2">
                <label for="debtDescription" class="form-label">Description</label>
                <textarea class="form-control" @bind="Description" rows="5" required></textarea>
            </div>

            <div class="text-center" style="margin-top: 20px;">
                <button type="submit" class="btn submit-btn">Submit</button>
            </div>
        </form>
    </div>
</div>

@code {
    public string DebtFrom { get; set; }
    public decimal Amount { get; set; }
    public DateTime StartDate { get; set; } = DateTime.Now;
    public DateTime EndDate { get; set; } = DateTime.Now;
    public string Relationship { get; set; }
    public string Description { get; set; }
    public string Status { get; set; }

    private string ErrorMessage { get; set; }

    private async Task HandleSaveDebt()
    {
        try
        {
            if (Amount < 1)
            {
                ErrorMessage = "Amount cannout be less than one.";
            }

            // Call service to update balance
            var username = UserService.GetLoggedInUser()?.Username;

            if (Status == "Paid" && UserService.GetBalance().Balance < Amount)
            {
                ErrorMessage = "Insufficient balance. There is no sufficient balance to pay the debt.";
                return;
            }

            // Update balance if valid
            UserService.UpdateBalance(username, Amount, Status);

            var newDebt = new FinTrail.Model.Debt
                {
                    DebtFrom = DebtFrom,
                    Amount = Amount,
                    StartDate = StartDate,
                    EndDate = EndDate,
                    Relationship = Relationship,
                    Description = Description,
                    Status = Status
                };

            if (DebtService.AddDebt(newDebt))
            {
                Nav.NavigateTo("/debt");
            }
            else
            {
                ErrorMessage = "Failed to add debt. Please try again.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred: {ex.Message}";
        }
    }
}