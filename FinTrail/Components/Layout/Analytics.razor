@using FinTrail.Model
@using FinTrail.Services.Interface
@inject IUserInterface UserService
@inject IDebtInterface DebtService
@inject ITransactionInterface TransactionService

<style>
    /* Main Dashboard */
    .main-dashboard {
        margin-left: 220px;
        padding: 20px;
        font-family: 'Varela Round', Tahoma, sans-serif;
        color: #333333;
    }

    /* Dashboard Grid */
    .dashboard-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 20px;
    }


    .dashboard-section {
        background-color: #ffffff;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        font-size: 18px;
        text-align: center;
        margin-bottom: 20px;
    }

        .dashboard-section h2 {
            color: #004d00;
            font-size: 20px;
            margin-bottom: 10px;
        }

        .dashboard-section p {
            font-size: 24px;
            font-weight: bold;
            color: #2f5a83;
        }

    .total-balance {
        background-color: #d1f7c4;
    }

    .total-debts {
        background-color: #fbd6d6;
    }

    .unpaid-debts {
        background-color: #fef1b2;
    }

    .total-income {
        background-color: #d1ecf1;
    }

    /* Chart Container */
    .chart-container {
        display: flex;
        justify-content: space-between;
        gap: 30px;
    }

    .chart {
        width: 48%;
        background-color: #ffffff;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

        .chart h3 {
            text-align: center;
            color: #004d00;
            margin-bottom: 20px;
        }

    .debt-table {
        margin-top: 30px;
        margin-bottom: 50px;
        background-color: #ffffff;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

        .debt-table table {
            width: 100%;
            border-collapse: collapse;
            border-radius: 10px;
        }

            .debt-table table th,
            .debt-table table td {
                padding: 15px;
                text-align: center;
                font-size: 16px;
                color: #333333;
            }

            .debt-table table th {
                background-color: #d1f7c4;
                color: #004d00;
                font-weight: bold;
            }

            .debt-table table td {
                background-color: #f9f9f9;
                border-bottom: 1px solid #e0e0e0;
            }

            .debt-table table tr:hover {
                background-color: #f1f1f1;
            }

    .highlight-heading {
        color: #d35400; 
        display: flex;
        align-items: center;
        gap: 10px;
        font-weight: bold;
        font-size: 24px;
    }

    .info-icon {
        display: inline-flex;
        justify-content: center;
        align-items: center;
        width: 24px;
        height: 24px;
        background-color: #ffebcc; 
        color: #d35400;
        border-radius: 50%;
        font-size: 16px;
        font-weight: bold;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }


</style>

<div class="main-dashboard">
    <!-- Dashboard Sections Grid -->
    <div class="dashboard-grid">
        <div class="dashboard-section total-balance">
            <h2>Total Balance</h2>
            <p>@UserService.GetBalance().SelectedCurrency @UserService.GetBalance().Balance</p>
        </div>

        <div class="dashboard-section total-debts">
            <h2>Total Expenses</h2>
            <p>@UserService.GetBalance().SelectedCurrency @TotalExpenses</p>
        </div>

        <div class="dashboard-section unpaid-debts">
            <h2>Unpaid Debts</h2>
            <p>@UserService.GetBalance().SelectedCurrency @TotalUnpaidDebtAmount</p>
        </div>

        <div class="dashboard-section total-income">
            <h2>Total Income</h2>
            <p>@UserService.GetBalance().SelectedCurrency @TotalIncome</p>
        </div>

        <div class="dashboard-section total-balance">
            <h2>Highest Transaction (Current Month)</h2>
            <p>@UserService.GetBalance().SelectedCurrency @HighestTransactionAmount</p>
        </div>

        <div class="dashboard-section total-debts">
            <h2>Lowest Transaction (Current Month)</h2>
            <p>@UserService.GetBalance().SelectedCurrency @LowestTransactionAmount</p>
        </div>

        <div class="dashboard-section unpaid-debts">
            <h2>Total Debts</h2>
            <p>@UserService.GetBalance().SelectedCurrency @TotalDebtAmount</p>
        </div>

        <div class="dashboard-section total-income">
            <h2>Total Paid Debts</h2>
            <p>@UserService.GetBalance().SelectedCurrency @TotalPaidDebtAmount</p>
        </div>
    </div>

    <!-- Debts Table -->
    <div class="debt-table">
        <div class="highlight-heading mb-2">
            <div class="info-icon">i</div>
            Unpaid Debts
        </div>
        <table class="table table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th>SN.</th>
                    <th>Debt From</th>
                    <th>Amount</th>
                    <th>Start Date</th>
                    <th>End Date</th>
                </tr>
            </thead>
            <tbody>
                @if (pendingDebts?.Any() == true)
                {
                    int sn = 1;
                    @foreach (var debt in pendingDebts.Where(d => d.DebtID != 0))
                    {
                        <tr class="pending-debt">
                            <td>@sn</td>
                            <td>@debt.DebtFrom</td>
                            <td>@SelectedCurrency @debt.Amount</td>
                            <td>@debt.StartDate.ToString("yyyy-MM-dd")</td>
                            <td>@debt.EndDate.ToString("yyyy-MM-dd")</td>
                        </tr>
                        sn++;
                    }
                }
                @if (pendingDebts == null || pendingDebts.All(d => d.DebtID == 0))
                {
                    <tr>
                        <td colspan="5" class="text-center">No pending debts found.</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    private List<FinTrail.Model.Debt> debts = new();
    private List<FinTrail.Model.Transaction> transactions = new();
    private string SelectedCurrency { get; set; }
    private List<FinTrail.Model.Debt> pendingDebts = new();
    private List<FinTrail.Model.Debt> paidDebts = new();
    private decimal TotalDebtAmount { get; set; }
    private decimal TotalUnpaidDebtAmount { get; set; }
    private decimal TotalIncome { get; set; }
    private decimal TotalExpenses { get; set; }
    private decimal HighestTransactionAmount { get; set; }
    private decimal LowestTransactionAmount { get; set; }
    private decimal TotalPaidDebtAmount { get; set; }

    private int FilterMonth { get; set; } = 1; // January as default
    private int FilterYear { get; set; } = DateTime.Now.Year;

    protected override async Task OnInitializedAsync()
    {
        // Pulling transaction info
        transactions = TransactionService.GetAllTransactions();

        // Filter transactions for the specific month and year and calculate totals for the month
        var filteredTransactions = transactions.Where(t => t.TransactionDate.Month == FilterMonth && t.TransactionDate.Year == FilterYear);

        TotalIncome = filteredTransactions.Where(t => t.Category == "Credit").Sum(t => t.Amount);
        TotalExpenses = filteredTransactions.Where(t => t.Category == "Debit").Sum(t => t.Amount);

        HighestTransactionAmount = filteredTransactions.Max(t => t.Amount);
        LowestTransactionAmount = filteredTransactions.Min(t => t.Amount);

        // Pulling all debt amounts in a list
        debts = DebtService.GetAllDebts();
        SelectedCurrency = UserService.GetLoggedInUser().SelectedCurrency;
        pendingDebts = debts.Where(d => d.Status == "Pending").ToList();
        paidDebts = debts.Where(d => d.Status == "Paid").ToList();

        TotalDebtAmount = debts.Sum(d => d.Amount);
        TotalUnpaidDebtAmount = pendingDebts.Sum(d => d.Amount);
        TotalPaidDebtAmount = paidDebts.Sum(d => d.Amount);
    }
}

